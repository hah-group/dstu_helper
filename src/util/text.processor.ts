import { Lesson } from '../lesson/lesson.entity';
import * as moment from 'moment';
import { WeekdayDefinition } from './definition/weekday.definition';
import { TimeRelativeProcessor } from './time-relative.processor';
import { LessonType } from '@prisma/client';
import { DateTime, Time } from './time';
import { RelativeDayDefinition } from './definition/relative-day.definition';
import { MonthGenitiveDefinition } from './definition/month.definition';
import { StudyGroup } from '../study-group/study-group.entity';
import * as str from 'string';

export const SCHEDULE_ACTIVATION = /^—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ( –ø–∞—Ä)?/gi;
export const WHAT_ACTIVATION = /(—á—Ç–æ|—á–æ|—à–æ|—á–µ|—á—ë)( (–∑–∞|–ø–æ|—É –Ω–∞—Å|–∑–∞–≤—Ç—Ä–∞))* (–ø–∞—Ä–∞–º|–ø–∞—Ä—ã)( –Ω–∞)?( –∑–∞–≤—Ç—Ä–∞)?.*$/gi;
export const AT_ACTIVATION = /–ø–∞—Ä—ã (–Ω–∞|–≤|–≤–æ) [–∞-—è—ë\d]+/gi;
export const WHOM_ACTIVATION = /(.*–∫–∞–∫–∏–µ (–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)? (–ø–∞—Ä—ã).*|–ø–∞—Ä—ã.*?–∫–∞–∫–∏–µ)/gi;

export const BAN_WORDS = /(–∑–∞–¥–∞–ª–∏)/i;

export const WHERE_AUDIENCE = /(–∫—É–¥–∞|–≥–¥–µ|–∫–∞–∫–∞—è)( [–∞-—è ]*)?(–∏–¥—Ç–∏|–ø–∞—Ä–∞|–∞—É–¥–∏—Ç–æ—Ä–∏—è)/gi;
export const NEXT_AUDIENCE = /^(–∫–∞–∫–∞—è |–≥–¥–µ |—á—Ç–æ )?(–Ω–µ–∫—Å—Ç|—Å–ª–µ–¥—É—é—â–∞—è|—Å–ª–µ–¥)( –ø–∞—Ä–∞)?$/gi;

export const banWordsExits = (text: string): boolean => {
  return !!text.match(BAN_WORDS);
};

export class TextProcessor {
  static LAST_LESSON = '–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–Ω—è—è –ø–∞—Ä–∞';
  static LESSONS_ENDED = '–ü–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å';
  static TODAY_LESSON_NONE = '–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç';
  static NOW_LESSON_NONE = '–°–µ–π—á–∞—Å –ø–∞—Ä –Ω–µ—Ç';
  static SCHEDULE_UPDATING = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
  static WRITE_GROUP_NAME = '–ù–∞–ø–∏—à–∏ –∏–º—è –≥—Ä—É–ø–ø—ã';
  static SOURCE_NOT_FOUND_GROUP = '–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  static NOT_FOUND_GROUP = '–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. –ù–∞–ø–∏—à–∏ !–¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É <–∏–º—è –≥—Ä—É–ø–ø—ã> —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';

  public static youAddInGroup(groupName: string): string {
    return `–¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ${groupName}`;
  }

  public static scheduleEmpty(atDate: DateTime): string {
    return `üòØ –ü–∞—Ä –Ω–∞ ${this.atDate(atDate)} –Ω–µ—Ç!`;
  }

  public static notNowLessons(todayCount: number, atDate: DateTime): string {
    if (todayCount < 1) return this.scheduleEmpty(atDate);
    else return `–ü–∞—Ä—ã –Ω–∞ ${this.atDate(atDate)} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`;
  }

  public static notNextLessons(todayCount: number, atDate: DateTime): string {
    if (todayCount < 1) return this.scheduleEmpty(atDate);
    else return `–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞!`;
  }

  public static lessons(group: StudyGroup, atDate: DateTime): string {
    const groupedLessons = this.groupLessons(group.getLessonsAtDay(atDate));

    if (groupedLessons.size < 1) return this.scheduleEmpty(atDate);

    const mnemonic = this.atDate(atDate);
    let result = `–ü–∞—Ä—ã ${group.name} –Ω–∞ ${mnemonic}\n\n`;

    for (const entry of groupedLessons.values()) {
      const lessonClass = this.lessonClass(entry);
      const firstLesson = entry[0];
      const manyPairAdd = `${entry.length > 1 && !firstLesson.subgroup ? '‚ùóÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è\n' : ''}`;
      result += `${manyPairAdd}üìå ${firstLesson.order} –ø–∞—Ä–∞ ${
        firstLesson.isNow(true) ? '(–°–µ–π—á–∞—Å)' : ''
      } (${this.timeFormat(firstLesson.start)} - ${this.timeFormat(firstLesson.end)})
üìï ${this.lessonType(firstLesson.type)}: ${firstLesson.name}
${lessonClass}\n\n`;
    }

    return result;
  }

  public static short(group: StudyGroup, now: boolean): string {
    const groupedLessons = this.groupLessons(group.getLessonsAtDay(Time.get()));

    const order = now ? TimeRelativeProcessor.now(false, Time.get()) : TimeRelativeProcessor.next(Time.get());
    const target: Lesson[] | undefined = groupedLessons.get(order);

    if (!target)
      return now
        ? this.notNowLessons(groupedLessons.size, Time.get())
        : this.notNextLessons(groupedLessons.size, Time.get());

    let result = '';

    const lessonClass = this.lessonClass(target, true);
    const firstLesson = target[0];
    const manyPairAdd = `${target.length > 1 && !firstLesson.subgroup ? '‚ùóÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è\n' : ''}`;
    result += `${manyPairAdd}üìå ${firstLesson.order} –ø–∞—Ä–∞ (${this.timeFormat(firstLesson.start)} - ${this.timeFormat(
      firstLesson.end,
    )})
üìï ${this.lessonType(firstLesson.type)}: ${firstLesson.name}
${lessonClass}\n\n`;

    return result;
  }

  private static groupLessons(lessons: Lesson[]): Map<number, Lesson[]> {
    const groupedLessons: Map<number, Lesson[]> = new Map<number, Lesson[]>();
    lessons.forEach((lesson) => {
      const order = lesson.order;
      let group = groupedLessons.get(order);

      if (!group) group = [lesson];
      else group.push(lesson);

      groupedLessons.set(order, group);
    });

    return groupedLessons;
  }

  private static lessonClass(lessons: Lesson[], full = false): string {
    ///TODO REFUCKTOR
    let result = `üè¢ ${lessons[0].classRoom && lessons[0].corpus ? '–ê—É–¥–∏—Ç–æ—Ä–∏—è:' : ''} `;
    let i = 0;
    for (const lesson of lessons) {
      const { classRoom, corpus, subgroup } = lesson;
      if (lessons.length > 1 && !subgroup && !full) return '';
      const subgroupAdd = subgroup ? `${subgroup} –ø/–≥: ` : '';
      const moreAdd = lessons.length > 1 ? ', ' : '';
      if (classRoom && corpus) result += `${subgroupAdd}${corpus}-${classRoom}${i + 1 < lessons.length ? moreAdd : ''}`;
      else if (classRoom) result += `${subgroupAdd}${classRoom}${moreAdd}`;
      i++;
    }

    if ((lessons.length < 2 && lessons[0].distance) || (full && lessons[0].distance))
      result += '\n‚ùóÔ∏è –ü–∞—Ä–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è';
    if (!lessons[0].classRoom) return '';

    return result;
  }

  private static timeFormat(date: Date): string {
    return moment(date).format('HH:mm');
  }

  private static atDate(date: DateTime): string {
    const currentDate = Time.get();
    const atDate = moment(date);
    const diff = Math.floor(atDate.startOf('d').diff(currentDate.startOf('d'), 'd', true));
    if (diff > 1 && diff <= 7) return WeekdayDefinition[atDate.isoWeekday()];
    else {
      const relativeDay = RelativeDayDefinition[diff];
      if (relativeDay) return relativeDay;
      else
        return `${atDate.date()} ${MonthGenitiveDefinition[atDate.month()]}${
          atDate.year() - currentDate.year() !== 0 ? ` ${atDate.year()}` : ''
        }, ${str(WeekdayDefinition[atDate.isoWeekday()]).capitalize().s}`;
    }
  }

  private static lessonType(type: LessonType): string {
    switch (type) {
      case LessonType.LECTURE:
        return '–õ–µ–∫—Ü–∏—è';
      case LessonType.PRACTICAL:
        return '–ü—Ä–∞–∫—Ç–∏–∫–∞';
      case LessonType.LABORATORY:
        return '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è';
      case LessonType.EXAMINATION:
        return '–≠–∫–∑–∞–º–µ–Ω';
      case LessonType.EXAM_WITHOUT_MARK:
        return '–ó–∞—á—ë—Ç';
    }
  }
}
